{"cmd": "def swap(arr, i, j):\n    \"\"\"\n    Use this as a helper method to swap two elements in an array\n    \"\"\"\n    temp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = temp\n\ndef merge(x, y, i1, mid, i2):\n    \"\"\"\n    Perform a merge of two contiguous sorted sub-chunks of\n    the array x, using y as a staging area\n\n    Parameters\n    ----------\n    x: list\n        The main array\n    y: list\n        The array to copy into as the two chunks are being merged\n    i1: int\n        Left of first chunk\n    mid: int\n        Right of first chunk\n    i2: int\n        End of second chunk\n    \"\"\"\n    cursorL = i1\n    cursorR = mid + 1\n    idx = i1\n\n    while cursorL <= mid and cursorR <= i2:\n        if x[cursorL] <= x[cursorR]:\n            y[idx] = x[cursorL]\n            idx += 1\n            cursorL += 1\n        elif x[cursorR] < x[cursorL]:\n            y[idx] = x[cursorR]\n            idx += 1\n            cursorR += 1\n\n    while cursorL <= mid:\n        y[idx] = x[cursorL]\n        idx += 1\n        cursorL += 1\n\n    while cursorR <= i2:\n        y[idx] = x[cursorR]\n        idx += 1\n        cursorR += 1\n   \n    for i in range(i1, i2 + 1):\n        x[i] = y[i]\n    \n    ## TODO: Fill this in\n\n\ndef mergesort_rec(x, y, i1, i2):\n    \"\"\"\n    A recursive call to sort a subset of the array\n\n    Parameters\n    ----------\n    x: list\n        Array to sort\n    y: list\n        A temporary array / staging area to store intermediate results\n    i1: int\n        First index of chunk to sort, inclusive\n    i2: int\n        Second index of chunk to sort, inclusive (i2 >= i1)\n    \"\"\"\n    if i1 < i2:\n        mid = i1 + (i2 - i1) // 2\n        ## TODO: Fill this in\n        mergesort_rec(x, y, i1, mid)\n        mergesort_rec(x, y, mid + 1, i2)\n        merge(x, y, i1, mid, i2) \n    return x\n\n\ndef mergesort(x):\n    \"\"\"\n    An entry point for merge sort on the entire array\n\n    Parameters\n    ----------\n    x: list\n        Array to sort\n    \"\"\"\n    y = [0]*len(x) # Create a temporary array to be used as a staging area\n    mergesort_rec(x, y, 0, len(x)-1)\n\n\narr = [51, 21, 66, 69, 56, 13, 44, 6]\nmergesort(arr)\nprint(arr)\narr = [23, 1, 15, 24, 47, 29]\nmergesort(arr)\nprint(arr)", "cmd_opts": " --cell_id=NONE -s", "import_complete": 1, "terminal": "nvimterm"}