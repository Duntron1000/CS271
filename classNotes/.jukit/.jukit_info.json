{"cmd": "import numpy as np\nimport matplotlib.pyplot as plt\n\nclass TreeNode(object):\n    def __init__(self, key):\n        self.key = key\n        self.left = None\n        self.right = None\n        self.height = 0\n        self.inorder_pos = 0\n\n    # change to keep the tree balancee - tree rotations \n    # Case1 : height(node.left) = height(node.right) + 2\n    #   - Case1a: height(node.left.left) > height(node.left.right) \n    #       - height(node.left.left) = h + 1\n    #       - clockwise rotation about node makes both left and right height of h + 1\n    #\n    #   - Case1b: height(node.left.left) < height(node.left.right)\n    #       - more annoying because a rotation about node will not balance this\n    #       - both of the childred of node.left.right have a hight of <= h\n    #       - counter clockwise rotation about node.left makes height(node.left.left) > height (node.left.righ)\n    #       - turns into case1a\n\n    def add(self, key):\n        ret = self\n        if key < self.key:\n            if self.left:\n                self.left.add(key)\n            else:\n                self.left = TreeNode(key)\n        elif key > self.key:\n            if self.right:\n                self.right.add(key)\n            else:\n                self.right = TreeNode(key)\n\n        # rebalance \n\n        #return\n\n\n    def height(self):\n        if self == None:\n            return -1\n        return 1 + max(self.left.height(), self.right.height())\n    \n    def inorder(self, num, key_list):\n        \"\"\"\n        Parameters\n        ----------\n        num: list\n            List of a single element which keeps \n            track of the number I'm at\n        \"\"\"\n        if self.left:\n            self.left.inorder(num, key_list)\n        self.inorder_pos = num[0]\n        key_list.append(self.key)\n        num[0] += 1\n        if self.right:\n            self.right.inorder(num, key_list)\n    \n    def draw(self, y):\n        x = self.inorder_pos\n        plt.scatter([x], [y], 50, 'k')\n        plt.text(x+0.2, y, \"{}\".format(self.key))\n        y_next = y-1\n        if self.left:\n            x_next = self.left.inorder_pos\n            plt.plot([x, x_next], [y, y_next])\n            self.left.draw(y_next)\n        if self.right:\n            x_next = self.right.inorder_pos\n            plt.plot([x, x_next], [y, y_next])\n            self.right.draw(y_next)\n\n    def remove(self, node):\n        if node > self.key and self.right:\n            self.right = self.right.remove(node)\n            return self\n        elif node < self.key and self.left:\n            self.left = self.left.remove(node)\n            return self\n        else:\n            if self.left and self.right:\n                # get the highest number in the left sub tree\n                cursor = self.left\n                while cursor.right:\n                    cursor = cursor.right\n                # replace the node we want to remove with that \n                self.key = cursor.key\n                # remove the one we replaced with \n                self.left = self.left.remove(cursor.key)\n                return self\n            else:\n                if self.left:\n                    return self.left\n                else: \n                    return self.right\n\n\n        \n        \nclass BinaryTree(object):\n    def __init__(self):\n        self.root = None\n    \n    def inorder(self):\n        key_list = []\n        if self.root:\n            self.root.inorder([0], key_list)\n        return key_list\n    \n    def draw(self):\n        self.inorder()\n        if self.root:\n            self.root.draw(0)\n    \n    def add(self, key):\n        if self.root:\n            self.root.add(key)\n        else:\n            self.root = TreeNode(key)\n    \n    def remove(self, node):\n        if self.root:\n            self.root.remove(node)\n\n    def height(self, node):\n        return node.height()\n\ndef make_tree():\n    T = BinaryTree()\n    for val in [10, 7, 16, 3, 9, 11, 20, 14, 17, 13, 12, 6, 5, 17, 15, 4, 8]:\n        T.add(val)\n    return T\n\nT = make_tree()\nT.draw()\nprint(height(T.root))\n\n", "cmd_opts": " --cell_id=NONE -s", "import_complete": 1}